// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  relationMode      = "foreignKeys"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@index([id])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([id])
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  background    String?   @default("https://twitter.kacperhemperek.com/images/background/bg-placeholder.jpg")
  description   String?
  born          DateTime?
  location      String?

  followers User[]    @relation("Followers")
  following User[]    @relation("Followers")
  accounts  Account[]
  sessions  Session[]
  likes     Like[]
  posts     Post[]
  retweets  Retweet[]

  @@index([id, email])
  @@fulltext([name])
  @@fulltext([description])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Like {
  id     String @id @default(cuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([postId])
  @@index([userId])
}

model Retweet {
  id     String @id @default(cuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  retweetedAt DateTime @default(now())

  @@index([postId])
  @@index([userId])
}

model Post {
  id        String   @id @default(cuid())
  message   String   @db.VarChar(255)
  createdAt DateTime @default(now())

  likes    Like[]
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Post[]    @relation("Comments")
  parent   Post?     @relation("Comments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?
  retweets Retweet[]

  @@index([authorId])
  @@index([parentId])
  @@fulltext([message])
}
